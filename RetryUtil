import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.retry.RecoveryCallback;
import org.springframework.retry.RetryCallback;
import org.springframework.retry.RetryContext;
import org.springframework.retry.backoff.FixedBackOffPolicy;
import org.springframework.retry.policy.SimpleRetryPolicy;
import org.springframework.retry.support.RetryTemplate;


public class RetryUtil {

    private static final Logger log = LoggerFactory.getLogger(RetryUtil.class);

    public static void retryMethod(){

        // 重试机制
        RetryTemplate retryTemplate = new RetryTemplate();
        SimpleRetryPolicy retryPolicy = new SimpleRetryPolicy();
        retryPolicy.setMaxAttempts(5);// 重试5次
        retryTemplate.setRetryPolicy(retryPolicy);
        //设置重试回退操作策略，主要设置重试间隔时间
        FixedBackOffPolicy fixedBackOffPolicy = new FixedBackOffPolicy();
        fixedBackOffPolicy.setBackOffPeriod(3000);
        retryTemplate.setBackOffPolicy(fixedBackOffPolicy);
        try {
            // obj为doWithRetry的返回结果，可以为任意类型
            Object obj = retryTemplate.execute(new RetryCallback<Object, Exception>() {
                int i = 1;
                @Override
                public Object doWithRetry(RetryContext context) {// 开始重试
                    log.error("@@@@@第{}次重试",i++);
                    testRedo();
                    return "此处可返回操作结果";
                }
            }, new RecoveryCallback<Object>() {
                @Override
                public Object recover(RetryContext context) { // 重试多次后都失败了
                    System.out.println("重试几次都失败了，烦躁!!!!");
                    return null;
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void testRedo() {
        System.out.println("执行Redo代码");
        divideMethod();
    }

    private static void divideMethod() {
        System.out.println("快出异常了");
        int i = 10/0;
        System.out.println(i);
    }

}

//测试代码
@Test
public void testRetry01(){
    RetryUtil.retryMethod();
}
